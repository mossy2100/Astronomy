    public static bool UseHorner = false;


    public static double CalcDeltaTPolynomialUsingHorner(int year, double y)
    {
        double t, u;
        switch (year)
        {
            case < -500:
                u = (y - 1820) / 100;
                return Horner(new double[] {
                    -20,
                    0,
                    32,
                }, u);

            case -500:
                return 17203.7;

            case > -500 and <= 500:
                u = y / 100;
                return Horner(new double[] {
                    10583.6,
                    -1014.41,
                    33.78311,
                    -5.952053,
                    -0.1798452,
                    0.022174192,
                    0.0090316521,
                }, u);

            case > 500 and <= 1600:
                u = (y - 1000) / 100;
                return Horner(new double[] {
                    1574.2,
                    -556.01,
                    71.23472,
                    0.319781,
                    -0.8503463,
                    -0.005050998,
                    0.0083572073,
                }, u);

            case > 1600 and <= 1700:
                t = y - 1600;
                return Horner(new double[] {
                    120,
                    -0.9808,
                    -0.01532,
                    1d / 7129,
                }, t);

            case > 1700 and <= 1800:
                t = y - 1700;
                return Horner(new double[] {
                    8.83,
                    0.1603,
                    -0.0059285,
                    0.00013336,
                    -1d / 1174000,
                }, t);

            case > 1800 and <= 1860:
                t = y - 1800;
                return Horner(new double[] {
                    13.72,
                    -0.332447,
                    0.0068612,
                    0.0041116,
                    -0.00037436,
                    0.0000121272,
                    -0.0000001699,
                    0.000000000875,
                }, t);

            case > 1860 and <= 1900:
                t = y - 1860;
                return Horner(new double[] {
                    7.62,
                    0.5737,
                    -0.251754,
                    0.01680668,
                    -0.0004473624,
                    1d / 233174,
                }, t);

            case > 1900 and <= 1920:
                t = y - 1900;
                return Horner(new double[] {
                    -2.79,
                    1.494119,
                    -0.0598939,
                    0.0061966,
                    -0.000197,
                }, t);

            case > 1920 and <= 1941:
                t = y - 1920;
                return Horner(new double[] {
                    21.20,
                    0.84493,
                    -0.076100,
                    0.0020936,
                }, t);

            case > 1941 and <= 1961:
                t = y - 1950;
                return Horner(new double[] {
                    29.07,
                    0.407,
                    -1d / 233,
                    1d / 2547,
                }, t);

            case > 1961 and <= 1986:
                t = y - 1975;
                return Horner(new double[] {
                    45.45,
                    1.067,
                    -1d / 260,
                    -1d / 718,
                }, t);

            case > 1986 and <= 2005:
                t = y - 2000;
                return Horner(new double[] {
                    63.86,
                    0.3345,
                    -0.060374,
                    0.0017275,
                    0.000651814,
                    0.00002373599,
                }, t);

            case > 2005 and <= 2050:
                t = y - 2000;
                return Horner(new double[] {
                    62.92,
                    0.32217,
                    0.005589,
                }, t);

            case > 2050 and <= 2150:
                u = (y - 1820) / 100;
                return -20 + 32 * u * u - 0.5628 * (2150 - y);

            case > 2150:
                u = (y - 1820) / 100;
                return -20 + 32 * u * u;
        }
    }



    public static void CompareDeltaTCalcMethods()
    {
        Stopwatch stopwatch = new Stopwatch();

        for (int year = -1999; year <= 3000; year++)
        {
            DeltaT.UseHorner = false;
            stopwatch.Reset();
            stopwatch.Start();
            double deltaT1 = DeltaT.CalcDeltaT(year);
            stopwatch.Stop();
            long tPow = stopwatch.ElapsedTicks;

            DeltaT.UseHorner = true;
            stopwatch.Reset();
            stopwatch.Start();
            double deltaT2 = DeltaT.CalcDeltaT(year);
            stopwatch.Stop();
            long tHorner = stopwatch.ElapsedTicks;

            double percentFaster = (double) (tPow - tHorner) / tPow * 100;

            double diff = Math.Abs(deltaT1 - deltaT2);
            if (diff > 1e-9)
            {
                Console.WriteLine($"Error with calc for year {year}. deltaT-Pow={deltaT1}, deltaT-Horner={deltaT2}, diff={diff}");
            }
            else
            {
                Console.WriteLine($"Calc matches for year {year}. Pow method took {tPow} ticks. Horner method took {tHorner} ticks. Horner method was {percentFaster:N2}% faster.");
            }
        }
    }
